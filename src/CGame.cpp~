#include <functional>

#include <iostream>
#include <random>
#include "Common.h"
#include "CGame.h"

namespace odb {

  void CGame::reset() {
    mMyBet = 1;
    mHisBet = 2;
    mValue = -1;
    timeEllapsed = 0;
  }
  
  CGame::CGame() {
    gameState = EGameState::kGame;
    reset();
  }

  void CGame::tick( long ms ) {
    timeEllapsed += ms;;
  }
  
  CControlCallback CGame::getKeyPressedCallback() {
        return [&](ECommand command) {
            if ( command == ECommand::kLeft ) {
                std::cout << "left pressed" << std::endl;
            }

          if ( command == ECommand::kRight ) {
                std::cout << "Right pressed" << std::endl;
	  }
            if ( command == ECommand::kUp ) {
                std::cout << "up pressed" << std::endl;
	    }

          if ( command == ECommand::kDown ) {
                std::cout << "down pressed" << std::endl;
            }

	  if ( command == ECommand::kFire1 ) {
	    std::cout << "fire1 pressed" << std::endl;
	  }
        };
    }

    CControlCallback CGame::getKeyReleasedCallback() {
        return [&](ECommand command) {

	    switch (gameState ) {
	    case EGameState::kGame:
	      if ( command == ECommand::kLeft ) {
                std::cout << "left released" << std::endl;
		mMyBet--;

		if ( mMyBet < 1 ) {
		  mMyBet = 1;
		}
		if ( mMyBet > 6 ) {
		  mMyBet = 6;
		}
	      }
	      
	      if ( command == ECommand::kRight ) {
                std::cout << "right released" << std::endl;

		mMyBet++;

		if ( mMyBet > 6 ) {
		  mMyBet = 6;
		}
		if ( mMyBet < 1 ) {
		  mMyBet = 1;
		}
	      }
	      
	      if ( command == ECommand::kUp ) {
                std::cout << "up released" << std::endl;
	      }
	      
	      if ( command == ECommand::kDown ) {
                std::cout << "down released" << std::endl;
	      }

	      if ( command == ECommand::kFire1 ) {
                std::cout << "fire1 released" << std::endl;

		std::random_device rd;
		std::mt19937 gen(rd());
		std::uniform_real_distribution<> dis(1, 6);
		mHisBet = dis( gen );
		
		do {
		  mValue = dis(gen);
		} while ( std::abs( mMyBet - mValue ) == std::abs( mHisBet - mValue ) );

		std::cout << "your bet: " << mMyBet << std::endl << "my bet: " << mHisBet << std::endl << "the value: " << mValue << std::endl;

		if ( std::abs( mMyBet - mValue ) <= std::abs( mHisBet - mValue )) {
		  std::cout << "YOU WON!" << std::endl;
		  gameState = EGameState::kVictory;
		} else {
		  std::cout << "I WON!" << std::endl;
		  gameState = EGameState::kGameOver;
		}
	      }
	      return;

	    case EGameState::kGameOver:
	    case EGameState::kVictory:
	      if ( command == ECommand::kFire1 ) {
                std::cout << "fire1 released" << std::endl;
		gameState = EGameState::kGame;
		reset();
	      }
	      return;

	    case EGameState::kTitleScreen:
	      gameState = EGameState::kGame;
	      reset();
	      return;
	    }
        };
    }
}
